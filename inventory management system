import tkinter as tk
from tkinter import messagebox
import sqlite3

# Database setup
conn = sqlite3.connect('inventory.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS products
             (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, price REAL)''')
conn.commit()

# User authentication (simple username/password validation)
def authenticate(username, password):
    users = {'admin': 'password123'}
    return users.get(username) == password

class InventoryManagement:
    def __init__(self, root):
        self.root = root
        self.root.title("Inventory Management System")

        self.username_label = tk.Label(root, text="Username")
        self.username_label.grid(row=0, column=0)
        self.username_entry = tk.Entry(root)
        self.username_entry.grid(row=0, column=1)

        self.password_label = tk.Label(root, text="Password")
        self.password_label.grid(row=1, column=0)
        self.password_entry = tk.Entry(root, show="*")
        self.password_entry.grid(row=1, column=1)

        self.login_button = tk.Button(root, text="Login", command=self.login)
        self.login_button.grid(row=2, column=0, columnspan=2)

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        if authenticate(username, password):
            self.inventory_screen()
        else:
            messagebox.showerror("Error", "Invalid credentials")

    def inventory_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        self.name_label = tk.Label(self.root, text="Product Name")
        self.name_label.grid(row=0, column=0)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(row=0, column=1)

        self.quantity_label = tk.Label(self.root, text="Quantity")
        self.quantity_label.grid(row=1, column=0)
        self.quantity_entry = tk.Entry(self.root)
        self.quantity_entry.grid(row=1, column=1)

        self.price_label = tk.Label(self.root, text="Price")
        self.price_label.grid(row=2, column=0)
        self.price_entry = tk.Entry(self.root)
        self.price_entry.grid(row=2, column=1)

        self.add_button = tk.Button(self.root, text="Add Product", command=self.add_product)
        self.add_button.grid(row=3, column=0, columnspan=2)

        self.edit_button = tk.Button(self.root, text="Edit Product", command=self.edit_product)
        self.edit_button.grid(row=4, column=0, columnspan=2)

        self.delete_button = tk.Button(self.root, text="Delete Product", command=self.delete_product)
        self.delete_button.grid(row=5, column=0, columnspan=2)

        self.view_button = tk.Button(self.root, text="View Inventory", command=self.view_inventory)
        self.view_button.grid(row=6, column=0, columnspan=2)

        self.low_stock_button = tk.Button(self.root, text="Low Stock Alert", command=self.low_stock_alert)
        self.low_stock_button.grid(row=7, column=0, columnspan=2)

    def add_product(self):
        name = self.name_entry.get()
        quantity = int(self.quantity_entry.get())
        price = float(self.price_entry.get())
        c.execute("INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)", (name, quantity, price))
        conn.commit()
        messagebox.showinfo("Success", "Product added successfully")

    def edit_product(self):
        name = self.name_entry.get()
        quantity = int(self.quantity_entry.get())
        price = float(self.price_entry.get())
        c.execute("UPDATE products SET quantity = ?, price = ? WHERE name = ?", (quantity, price, name))
        conn.commit()
        messagebox.showinfo("Success", "Product updated successfully")

    def delete_product(self):
        name = self.name_entry.get()
        c.execute("DELETE FROM products WHERE name = ?", (name,))
        conn.commit()
        messagebox.showinfo("Success", "Product deleted successfully")

    def view_inventory(self):
        c.execute("SELECT * FROM products")
        products = c.fetchall()
        inventory_window = tk.Toplevel(self.root)
        inventory_window.title("Inventory")

        for i, product in enumerate(products):
            tk.Label(inventory_window, text=product).grid(row=i, column=0)

    def low_stock_alert(self):
        threshold = 5
        c.execute("SELECT * FROM products WHERE quantity < ?", (threshold,))
        low_stock = c.fetchall()
        alert_window = tk.Toplevel(self.root)
        alert_window.title("Low Stock Alert")

        for i, product in enumerate(low_stock):
            tk.Label(alert_window, text=product).grid(row=i, column=0)

root = tk.Tk()
app = InventoryManagement(root)
root.mainloop()
